 [0.0,0.445]        
 [0.971899,1.95864] 
 [-3.99055,-4.9509] 
 [-4.96076,-1.03099]
 [-4.03126,-1.03902]


[[0.0,0.445],[0.971899,1.95864],[-3.99055,-4.9509],[-4.96076,-1.03099],[-4.03126,-1.03902]]
[[initial pos],[1.0,2.0],[-4.0,-5.0],[-5.0,-1.0],[-4.0,-1.0]]
[[0.540302,0.841471],[-0.583343,-0.812226],[-0.240258,0.970709],[0.999963,-0.00864383],[0.226566,-0.973996]]

collide(1.0,2.0,0.0,0.445,cos(1),sin(1),0.05) == (0.971899,1.95864,-0.583343,-0.812226) PASS
collide(-4,-5,0.971899,1.95864,-0.583343,-0.812226,0.05) == (-3.99055,-4.9509,-0.240258,0.970709) 
										output: (-3.9564905633532064,-5.024635927477541,0.9966017424861062,-1.7068228298874433) FAIL
collide(-5,-1,-3.99055,-4.9509,-0.240258,0.970709,0.05) == (-4.96076,-1.03099, 0.999963,-0.00864383) 
										output: (-4.960759036726581,-1.0309862356760902,0.9999628559472674,-0.008619042102779306) FAIL_vy
collide(-4,-1,-4.96076,-1.03099,0.999963,-0.00864383,0.05) == (-4.03126,-1.03902,0.226566,-0.973996)
										output: (-4.030580431257879,-1.0395580235108142,0.24353554102692265,-0.9871380491936136) FAIL
										
Function collide() fails compared to classic algorithm

Classic allgorithm gives a pretty good answer to the $100 problem #2, but up to the 7th digit									
