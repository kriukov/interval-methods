using IntervalArithmetic

# Perpendicular (z-) component of cross product (scalar quantity) for 2-D vectors: (x cross y) dot e_z
crossz(x, y) = x[1]*y[2] - x[2]*y[1]

function collisions(r0, v0, rho, tmax, precision=64)

	set_bigfloat_precision(precision)
	places = Vector[]
	circles = Vector[]
	# Put the starting point into the places array
	push!(places, r0)	
	# Normalize the speed
	v0 = v0/norm(v0)

	t = 0
	while mid(t) <= tmax

		# Arrays of times, n and m corresponding to each intersection in both solutions

		array_times = zeros(Interval, 3000, 3)

		# Populating the array with real intersection points

		i = 1
		for n = -200:200
			for m = -200:200
				R = [n, m]
				discr = rho^2 - (crossz(v0, r0 - R))^2
				# Throw away complex values
				if lo(discr) >= 0
					t1 = -dot(v0, r0 - R) - sqrt(discr)
				end

				if mid(abs(crossz(v0, r0 - R))) < rho
					array_times[i, 1] = t1
					array_times[i, 2] = Interval(n)
					array_times[i, 3] = Interval(m)
					i = i + 1
				end
			end
		end

		# Extracting the minimum positive time from array
		
		@show array_times
		
		tmin1 = Inf
		n1 = 0
		m1 = 0
		for i = 1:size(array_times)[1]-1
			if (mid(array_times[i, 1]) < mid(tmin1)) && (mid(array_times[i, 1]) > 0)
				tmin1 = array_times[i, 1]
				n1 = array_times[i, 2]
				m1 = array_times[i, 3]
			end
		end

		@show tfinal = tmin1
		@show nfinal = n1
		@show mfinal = m1

		# Normal vector at the point of collision
		N0 = r0 + v0*tfinal - [nfinal, mfinal]
		N = N0/norm(N0)

		# New velocity
		v1 = v0 - 2*dot(v0, N)*N

		# New position
		r1 = r0 + v0*tfinal

		# New time
		t = t + tfinal

		# Taking on the new values of v and r
		v0 = v1
		r0 = r1

		#println("r0 = ", r0, "v0 = ", v0, "t = ", t)
		
		push!(places, r0)
		push!(circles, [nfinal, mfinal])
		# Output for Mathematica
		print("{$(mid(r0[1])), $(mid(r0[2]))}, ")

	end
	return places, circles
	# Now the location will be

	#r = r0 + v0*(10 - t)
	#d = norm(r)
	#println("Final: r = ", r, "d = ", d)

end

#collisions([0.5, 0.1], [0.7, 0], 0.15, 20, 128)
#collisions([Interval(0.5), Interval(0.1)], [Interval(0.7), Interval(0)], 0.15, 20, 128)
