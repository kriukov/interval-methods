Find the trivial 1-2-3-1 periodic orbit using krawczyk2d_purity and the whole phase space as the initial interval

Time of execution: ~30h

3-element Array{Array{Array{IntervalArithmetic.Interval,1},1},1}:
 [[IntervalArithmetic.Interval(-0.5091739486503828,-0.5091739486134875),IntervalArithmetic.Interval(0.29304911868761885,0.2930491187239249)]]
 [[IntervalArithmetic.Interval(-0.5000000000324325,-0.4999999999708837),IntervalArithmetic.Interval(0.5235987755698678,0.523598775598299)]]  
 [[IntervalArithmetic.Interval(-0.5000000000244574,-0.49999999997557926),IntervalArithmetic.Interval(0.5235987755982986,0.5235987756221809)]]
 
 
Another run, with @time:

61461.967410 seconds (352.69 G allocations: 12.545 TB, 9.04% gc time)
3-element Array{Array{Array{IntervalArithmetic.Interval,1},1},1}:
[[IntervalArithmetic.Interval(-0.5091739486503828,-0.5091739486134875),IntervalArithmetic.Interval(0.29304911868761885,0.2930491187239249)]]
[[IntervalArithmetic.Interval(-0.5000000000324325,-0.4999999999708837),IntervalArithmetic.Interval(0.5235987755698678,0.523598775598299)]]  
[[IntervalArithmetic.Interval(-0.5000000000244574,-0.49999999997557926),IntervalArithmetic.Interval(0.5235987755982986,0.5235987756221809)]]


# Anonymous
julia> @time find_periodic_orbits(c, [1, 2], rect, 64, 1e-4)
6118.967365 seconds (16.68 G allocations: 472.618 GB, 9.19% gc time)
0-element Array{Array{Array{IntervalArithmetic.Interval,1},1},1}

# FastAnonymous
julia> @time find_periodic_orbits(c, [1, 2], rect, 64, 1e-4)
5987.698615 seconds (16.68 G allocations: 472.616 GB, 9.68% gc time)
0-element Array{Array{Array{IntervalArithmetic.Interval,1},1},1}

# I messed up. The path is [1, 2, 1].

# Problem: 
julia> f(x) = path_general(x, c, [1,2,1]) - x
f (generic function with 1 method)

julia> f([0, 0])
2-element Array{IntervalArithmetic.Interval,1}:
 IntervalArithmetic.Interval(-1.3545389598379823e-10,-1.3545389598379823e-10)
 IntervalArithmetic.Interval(6.283185307044132,6.283185307044133) 
 
Output is [0, ~<2pi] instead of [0, 0]!

# periodic with regular krawczyk: 1-3-1
@time find_periodic_orbits(c, [1, 3, 1], [Interval(-0.012, 0.001), Interval(pi/3-0.01, pi/3+0.0011)], 64, 1e-4)
 37.927249 seconds (142.76 M allocations: 4.096 GB, 7.18% gc time)
([[[IntervalArithmetic.Interval(-7.903703736252994e-11,-3.704669695472028e-15),IntervalArithmetic.Interval(1.047197551140141,1.047197551196597)],[IntervalArithmetic.Interval(-6.773574078598436e-11,-3.704669695472028e-15),IntervalArithmetic.Interval(1.047197551196597,1.0471975512530445)],[IntervalArithmetic.Interval(-3.704669695472028e-15,6.773568880990972e-11),IntervalArithmetic.Interval(1.0471975511401515,1.047197551196597)],[IntervalArithmetic.Interval(-3.704669695472028e-15,7.90361028503662e-11),IntervalArithmetic.Interval(1.047197551196597,1.0471975512530554)]]],403)

# periodic with periodic krawczyk (reject "X isect Y = empty")
@time find_periodic_orbits(c, [1, 3, 1], [Interval(-0.012, 0.001), Interval(pi/3-0.01, pi/3+0.0011)], 64, 1e-4)
 12.790110 seconds (35.68 M allocations: 1.004 GB, 5.62% gc time)
([[[IntervalArithmetic.Interval(-7.903703736252994e-11,-3.704669695472028e-15),IntervalArithmetic.Interval(1.047197551140141,1.047197551196597)],[IntervalArithmetic.Interval(-6.773574078598436e-11,-3.704669695472028e-15),IntervalArithmetic.Interval(1.047197551196597,1.0471975512530445)],[IntervalArithmetic.Interval(-3.704669695472028e-15,6.773568880990972e-11),IntervalArithmetic.Interval(1.0471975511401515,1.047197551196597)],[IntervalArithmetic.Interval(-3.704669695472028e-15,7.90361028503662e-11),IntervalArithmetic.Interval(1.047197551196597,1.0471975512530554)]]],403)


# New run of search for 1-2-3-1 with krawczyk2d_purity_periodic: more than twice as fast
25245.406842 seconds (151.34 G allocations: 5.309 TB, 7.98% gc time)
([[[IntervalArithmetic.Interval(-0.5091739486502705,-0.5091739486135997),IntervalArithmetic.Interval(0.2930491186877287,0.29304911872381495)]],[[IntervalArithmetic.Interval(-0.5000000000321938,-0.4999999999711231),IntervalArithmetic.Interval(0.5235987755701015,0.523598775598299)]],[[IntervalArithmetic.Interval(-0.5000000000242077,-0.49999999997582806),IntervalArithmetic.Interval(0.5235987755982986,0.5235987756219369)]]],432010)

# isosceles 1231
([[[IntervalArithmetic.Interval(-0.2852575176737096,-0.28525751767343605),IntervalArithmetic.Interval(0.28927509856433226,0.28927509856456873)],[IntervalArithmetic.Interval(-0.28525751767370716,-0.28525751767343605),IntervalArithmetic.Interval(0.2892750985645687,0.2892750985648031)],[IntervalArithmetic.Interval(-0.2852575176734361,-0.28525751767322866),IntervalArithmetic.Interval(0.2892750985643894,0.28927509856456873)],[IntervalArithmetic.Interval(-0.2852575176734361,-0.28525751767318985),IntervalArithmetic.Interval(0.2892750985645687,0.289275098564782)]]],302792)

# Isosceles 1231 with the new self-collapsing IntUnions
5950.159216 seconds (40.32 G allocations: 1.407 TB, 7.41% gc time)
([[[IntervalArithmetic.Interval(-0.2852575176737096,-0.28525751767343605),IntervalArithmetic.Interval(0.28927509856433226,0.28927509856456873)],
[IntervalArithmetic.Interval(-0.28525751767370716,-0.28525751767343605),IntervalArithmetic.Interval(0.2892750985645687,0.2892750985648031)],
[IntervalArithmetic.Interval(-0.2852575176734361,-0.28525751767322866),IntervalArithmetic.Interval(0.2892750985643894,0.28927509856456873)],
[IntervalArithmetic.Interval(-0.2852575176734361,-0.28525751767318985),IntervalArithmetic.Interval(0.2892750985645687,0.289275098564782)]]],
302792)

## Previously, the isosceles results were wrong due to atan2 error and they didn't agree with the analytical result.

#############################################################################

## Now, there is an error, possibly due to collapse_isect_step(), when intervals with negative diameter appear. Reproduce:

include("birkhoff.jl")
f(x) = path_general(x, c1, [1,2,3,1])
a = [IntervalArithmetic.Interval(-0.6243750000000001,-0.5931562499999999),IntervalArithmetic.Interval(0.44194271691106485,0.45827392864851174)]
purity(f, a)

Another test:
include("birkhoff.jl"); b = [PurityInterval(Interval(-4.349010407847645,-0.9680456260810649),1),PurityInterval(IntUnion([Interval(0.0,0.3232309355530365),Interval(5.369682871590993,6.283185307179586)]),0)]
T0(b, c, 1, 2)

Next step:
include("birkhoff.jl")
th = PurityInterval(IntUnion([Interval(0.0,0.3232309355530365),Interval(5.369682871590993,6.283185307179586)]),0)
r_nm, a_nm = table(c)
cos(th - a_nm[1,2])

Problem is with cos, as it seems:
include("birkhoff.jl")
b = IntUnion([Interval(-0.0,0.3232309355530365),Interval(5.369682871590993,6.283185307179586)])
cos(b)

Finally narrowed down to the obvious:

b1 = Interval(0.0,0.3232309355530365)
cos(b1)

sin also has a problem!
sin(Interval(1.7, 1.9))

Sanders/Benet sin had an error; fixed.

================================================

123-1 orbit:


1213-1 orbit:

([[[IntervalArithmetic.Interval(-0.5815909322057394,-0.5815909321268368),IntervalArithmetic.Interval(0.5235987755570859,0.5235987756395176)],[IntervalArithmetic.Interval(-0.5815909322080547,-0.5815909321352051),IntervalArithmetic.Interval(0.5235987756401307,0.5235987756419362)]]],3146354)

[Interval(-0.5815909322057394,-0.5815909321268368),Interval(0.5235987755570859,0.5235987756395176)]
[Interval(-0.5815909322080547,-0.5815909321352051),Interval(0.5235987756401307,0.5235987756419362)]


Avg. length per bounce (4 bounces): Interval(4.158264167539822,4.158265317600184)
4.158264167539822
4.158265317600184

Gaspard: 
4.1582647426

How to refine results given by krawczyk2d_purity_periodic:
Take a 2D hull of similar multiple answers;
Seek zeros again but only in this hull;
Answer will be more exact.

Here, the avg length/bounce for 1213-1 refined:

4.15826473299822
4.15826475214021

Next refinement step:
4.158264742549463
4.15826474258828

Next:
4.158264742550976
4.1582647425870745

sol = [Interval(-0.5815909321662858,-0.5815909321662854), Interval(0.5235987755982989,0.5235987755982991)]
for i = 1:10
    sol1 = find_periodic_orbits(c, [1, 2, 1, 3, 1], sol, 64, 1e-4)[1][1][1]
    sol = sol1
end

Final result:

Solution:
[Interval(-0.5815909321662858,-0.5815909321662854), Interval(0.5235987755982989,0.5235987755982991)]

Avg length/bounce:
4.158264742551725
4.158264742586391

